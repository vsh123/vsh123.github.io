<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-11-05T14:17:10+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Van</title><subtitle>ShakeVan's Blog</subtitle><author><name>Shake Van</name><email>vsh931025@gmail.com</email></author><entry><title type="html">github oauth 동작 원리</title><link href="http://localhost:4000/web/github-oauth/" rel="alternate" type="text/html" title="github oauth 동작 원리" /><published>2019-11-05T00:00:00+09:00</published><updated>2019-11-05T00:00:00+09:00</updated><id>http://localhost:4000/web/github-oauth</id><content type="html" xml:base="http://localhost:4000/web/github-oauth/">&lt;h1 id=&quot;github-oauth2-동작-방식&quot;&gt;github OAuth2 동작 방식&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/image/2019-11-05-github-oauth/1.png&quot; alt=&quot;connect&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;1--2번-과정&quot;&gt;1 ~ 2번 과정&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/image/2019-11-05-github-oauth/2.png&quot; alt=&quot;connect&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;사용자가 어플리케이션의 특정 URL로 접속한다. (/login)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;어플리케이션에서는 client_id를 포함하여 redirect URL을 전달한다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;(https://github.com/login/oauth/authorize?client_id=‘&lt;strong&gt;client가 사전에 받은 id&lt;/strong&gt;’)&lt;/p&gt;

&lt;h2 id=&quot;3--4번-과정&quot;&gt;3 ~ 4번 과정&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/image/2019-11-05-github-oauth/3.png&quot; alt=&quot;connect&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;사용자가 2번의 url로 이동하여 권한 허가를 한다&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Github에서는 code와 함께 사용자에게 redirectURL을 전달한다&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;(여기서 redirectURL은 client가 사전에 등록한 url이다)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/image/2019-11-05-github-oauth/4.png&quot; alt=&quot;connect&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;5번-이후-과정&quot;&gt;5번 이후 과정&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/image/2019-11-05-github-oauth/5.png&quot; alt=&quot;connect&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;사용자는 4번의 redirectURL로 code와 함께 어플리케이션에 전달한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;어플리케이션은 &lt;strong&gt;사용자에게 받은 code, 본인의 client_id, client_secret&lt;/strong&gt;과 함께 github으로 access_token 발급 요청을 한다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;(POST https://github.com/login/oauth/access_token)&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Github은 어플리케이션에게 사용자의 access_token, token_type을 리턴한다&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;8,9 : 이후 access_token을 통해 왔다리 갔다리 한다.&lt;/p&gt;

&lt;p&gt;Github은 refresh_token이 별도로 존재하지 않고 access_token이 지속 유지되나봄?&lt;/p&gt;</content><author><name>Shake Van</name><email>vsh931025@gmail.com</email></author><category term="Web" /><category term="web" /><category term="oauth" /><category term="github" /><summary type="html">github OAuth2 동작 방식</summary></entry><entry><title type="html">9주 회고</title><link href="http://localhost:4000/%ED%9A%8C%EA%B3%A0/remind-9/" rel="alternate" type="text/html" title="9주 회고" /><published>2019-11-03T00:00:00+09:00</published><updated>2019-11-03T00:00:00+09:00</updated><id>http://localhost:4000/%ED%9A%8C%EA%B3%A0/remind-9</id><content type="html" xml:base="http://localhost:4000/%ED%9A%8C%EA%B3%A0/remind-9/">&lt;blockquote&gt;
  &lt;p&gt;기간 : 2019년 10월 21일(월) ~ 2019년 11월 03일(일)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;이번-주-목표&quot;&gt;이번 주 목표&lt;/h2&gt;
&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;1일 1커밋&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;HeadFirst DesignPattern 한 챕터 정리&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;1일 HIIT 최소 한번이상 실시&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;30개 정도의 키워드를 만들고 정리해보자&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;나에게-칭찬해주고-싶은-점&quot;&gt;나에게 칭찬해주고 싶은 점&lt;/h2&gt;

&lt;h2 id=&quot;성장을-위한-조언&quot;&gt;성장을 위한 조언&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;하나도 목표를 달성한 것이 없다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;다음-주-목표&quot;&gt;다음 주 목표&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;1일 1커밋&lt;/li&gt;
  &lt;li&gt;HeadFirst DesignPattern 한 챕터 정리&lt;/li&gt;
  &lt;li&gt;1일 HIIT 최소 한번이상 실시&lt;/li&gt;
  &lt;li&gt;면접 준비 잘하기!&lt;/li&gt;
  &lt;li&gt;WoowaCrew OAuth&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;총평&quot;&gt;총평&lt;/h2&gt;
&lt;p&gt;매일 바쁘게 살아온 것 같은데 지금 돌이켜보면 어떤걸 했는지 잘 모르겠다.
심지어 8주차 회고를 진행하지 못했다.
내가 그날 배운 지식들을 정리하는 연습이 더 필요한 것 같다.&lt;/p&gt;</content><author><name>Shake Van</name><email>vsh931025@gmail.com</email></author><category term="회고" /><category term="회고" /><summary type="html">기간 : 2019년 10월 21일(월) ~ 2019년 11월 03일(일)</summary></entry><entry><title type="html">7주 회고</title><link href="http://localhost:4000/%ED%9A%8C%EA%B3%A0/remind-7/" rel="alternate" type="text/html" title="7주 회고" /><published>2019-10-20T00:00:00+09:00</published><updated>2019-10-20T00:00:00+09:00</updated><id>http://localhost:4000/%ED%9A%8C%EA%B3%A0/remind-7</id><content type="html" xml:base="http://localhost:4000/%ED%9A%8C%EA%B3%A0/remind-7/">&lt;blockquote&gt;
  &lt;p&gt;기간 : 2019년 10월 14일(월) ~ 2019년 10월 20일(일)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;이번-주-목표&quot;&gt;이번 주 목표&lt;/h2&gt;
&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;1일 1커밋&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;HeadFirst DesignPattern 한 챕터 정리&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;1일 HIIT 최소 한번이상 실시&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;RestController vs Controller 어노테이션 차이&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;ModelAttribute, ReqeustBody, RequestParam, PathVariable 어노테이션 공부&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;나에게-칭찬해주고-싶은-점&quot;&gt;나에게 칭찬해주고 싶은 점&lt;/h2&gt;

&lt;h2 id=&quot;성장을-위한-조언&quot;&gt;성장을 위한 조언&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;면접에서 아쉬웠던 점들을 정리해보면 좋을 것 같다.
    &lt;ul&gt;
      &lt;li&gt;보안에서 프로그래머가 된 이유?&lt;/li&gt;
      &lt;li&gt;내가되고 싶은 프로그래머, 만들고 싶은 것들&lt;/li&gt;
      &lt;li&gt;내가 알고있는 지식을 활용하는 방법&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;1일 1커밋이 끝났다. 다음주부터 다시 새로운 마음으로 시작해보자.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;다음-주-목표&quot;&gt;다음 주 목표&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;1일 1커밋&lt;/li&gt;
  &lt;li&gt;HeadFirst DesignPattern 한 챕터 정리&lt;/li&gt;
  &lt;li&gt;1일 HIIT 최소 한번이상 실시&lt;/li&gt;
  &lt;li&gt;30개 정도의 키워드를 만들고 정리해보자&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;총평&quot;&gt;총평&lt;/h2&gt;
&lt;p&gt;이번 주에는 면접이라는 큰 사건이 있었는데, 나와서 생각해보면 아쉬움이 많이 남는다. 단순히 나의 생각만 이야기하면 됐는데 뭐가 그리 떨렸는지 모르겠다.
특히 내가 알고있고 배운 지식을 왜 적용하여 이야기 못했는지, 스스로가 많이 아쉽다. 다음부터는 그런일이 발생하지 않도록 노력해야지!!!&lt;/p&gt;</content><author><name>Shake Van</name><email>vsh931025@gmail.com</email></author><category term="회고" /><category term="회고" /><summary type="html">기간 : 2019년 10월 14일(월) ~ 2019년 10월 20일(일)</summary></entry><entry><title type="html">데코레이터 패턴</title><link href="http://localhost:4000/design%20pattern/decorate-pattern/" rel="alternate" type="text/html" title="데코레이터 패턴" /><published>2019-10-18T00:00:00+09:00</published><updated>2019-10-18T00:00:00+09:00</updated><id>http://localhost:4000/design%20pattern/decorate-pattern</id><content type="html" xml:base="http://localhost:4000/design%20pattern/decorate-pattern/">&lt;h2 id=&quot;데코레이터-패턴&quot;&gt;데코레이터 패턴?&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;기본 구성요소 클래스위에 데코레이터하는 클래스를 래퍼하는 것&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;데코레이터-패턴이-필요한-상황&quot;&gt;데코레이터 패턴이 필요한 상황&lt;/h3&gt;

&lt;h4 id=&quot;다음과-같은-카페-메뉴가-존재한다고-하자&quot;&gt;다음과 같은 카페 메뉴가 존재한다고 하자&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. 아메리카노
2. 라떼
3. 아이스티
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;해당-메뉴에-대해서-공통로직으로-추출한다면-다음과-같이-추출할-수-있다&quot;&gt;해당 메뉴에 대해서 공통로직으로 추출한다면 다음과 같이 추출할 수 있다.&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/image/2019-10-18-decorate-pattern/image-1.png&quot; alt=&quot;connect&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;이-때-각-메뉴들이-선택할-수-있는-옵션들이-다음과-같다면&quot;&gt;이 때 각 메뉴들이 선택할 수 있는 옵션들이 다음과 같다면?&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. 휘핑 추가
2. 샷 추가
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;만약-위에처럼-계속-만든다면-다음과-같은-클래스들이-추가-될-것이다&quot;&gt;만약 위에처럼 계속 만든다면 다음과 같은 클래스들이 추가 될 것이다.&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. 아메리카노 (Americano)
2. 휘핑 아메리카노 (AmericanoWithWhip)
3. 샷 추가 아메리카노 (AmericanoWithShot)
4. 휘핑 + 샷 추가 아메리카노 (AmericanoWithWhipAndShot)
....
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;한 메뉴에 대해서 총 4가지의 클래스가 생성되었다!!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;위와-같은-상황이-발생하지-않게-하려면-어떻게-해야할까&quot;&gt;위와 같은 상황이 발생하지 않게 하려면 어떻게 해야할까?&lt;/h3&gt;

&lt;h4 id=&quot;옵션들이-기본-메뉴를-데코레이트decorate하게-구현해보자&quot;&gt;옵션들이 기본 메뉴를 데코레이트(decorate)하게 구현해보자!!&lt;/h4&gt;

&lt;p&gt;다음과 같이 Beverage를 extends한 데코레이트 클래스를 만들어보자&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DecorateOption&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Beverage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//메뉴를 Composition하고 있다.&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Beverage&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beverage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;DecorateOption&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Beverage&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beverage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;beverage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beverage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//데코하고 있는 메뉴 가격 + 옵션 가격을 리턴한다.&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beverage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getCost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그리고 이를 구성하는 옵션들을 클래스로 만들면 다음과 같은 구조가 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/image/2019-10-18-decorate-pattern/image-2.png&quot; alt=&quot;connect&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;자-이제-메뉴를-decorate해보자&quot;&gt;자 이제 메뉴를 Decorate해보자!!!&lt;/h3&gt;

&lt;h4 id=&quot;샷-추가한-아메리카노에-대한-코드를-다음과-같이-짜보자&quot;&gt;샷 추가한 아메리카노에 대한 코드를 다음과 같이 짜보자&lt;/h4&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;샷&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;추가&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;아메리카노&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Beverage&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beverage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Americano&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;아메리카노&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1500&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//아메리카노 + Shot을 한 값을 beverage에 넣는다&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;beverage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Shot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beverage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;샷 추가&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beverage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEqualTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;위를-그림으로-그려보면-다음과-같이-그려볼-수-있다&quot;&gt;위를 그림으로 그려보면 다음과 같이 그려볼 수 있다.&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/image/2019-10-18-decorate-pattern/image-3.png&quot; alt=&quot;connect&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;ocp-원칙개방-폐쇄의-원칙&quot;&gt;OCP 원칙(개방 폐쇄의 원칙)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;클래스는 확장에 대해서는 열려 있어야 하지만 코드 변경에 대해서는 닫혀 있어야 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Q. 구상요소 없이 데코레이터가 될 수도 있지 않을까?&lt;/p&gt;

&lt;p&gt;Q. 옵션List를 만들고 이곳에 add하면 어떨까? (이게 전략패턴이 되는 건가?)&lt;/p&gt;

&lt;p&gt;Q. 상속보다 구성?&lt;/p&gt;</content><author><name>Shake Van</name><email>vsh931025@gmail.com</email></author><category term="Design Pattern" /><category term="디자인 패턴" /><category term="Design Pattern" /><category term="Head First Design Pattern" /><category term="데코레이터 패턴" /><category term="Decorator Pattern" /><summary type="html">데코레이터 패턴?</summary></entry><entry><title type="html">RequestParam vs ModelAttribute vs RequestBody</title><link href="http://localhost:4000/spring/spring-boot-parameter-type/" rel="alternate" type="text/html" title="RequestParam vs ModelAttribute vs RequestBody" /><published>2019-10-14T00:00:00+09:00</published><updated>2019-10-14T00:00:00+09:00</updated><id>http://localhost:4000/spring/spring-boot-parameter-type</id><content type="html" xml:base="http://localhost:4000/spring/spring-boot-parameter-type/">&lt;h2 id=&quot;requestparam-vs-modelattribute-vs-requestbody-어노테이션의-차이는-무엇일까&quot;&gt;RequestParam vs ModelAttribute vs RequestBody 어노테이션의 차이는 무엇일까?&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;스프링 mvc를 구현해보려 하니 위 3개 어노테이션에 대해 혼란이 와서 정리를 해보려고 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;requestparam&quot;&gt;RequestParam&lt;/h3&gt;

&lt;p&gt;요청 파라미터를 매핑해주는 어노테이션이다.
만약 요청이 &lt;code class=&quot;highlighter-rouge&quot;&gt;/requestParam?name=van&lt;/code&gt;이라고 하면 아래와 같이 코드를 짤 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RestController&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Logger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LoggerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLogger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;TestController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/requestParam&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;requestParam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@RequestParam&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;만약 Request의 value이름이 RequestParam이름과 다를 경우에는 다음과 같이 작성해주면 된다.
&lt;code class=&quot;highlighter-rouge&quot;&gt;requestParam?na=van&lt;/code&gt;이라는 요청일 시&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RestController&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Logger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LoggerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLogger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;TestController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/requestParam&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//request의 파라미터 이름을 명시해준다.&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;requestParam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@RequestParam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;na&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;마지막으로 파라미터의 이름과 request로 넘어온 파라미터의 이름이 동일하면 @RequestParam를 생략할 수 있다.
&lt;code class=&quot;highlighter-rouge&quot;&gt;/requestParam?name=van&lt;/code&gt;이라는 요청 시&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RestController&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Logger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LoggerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLogger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;TestController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/requestParam&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;requestParam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 작성이 가능하다.&lt;/p&gt;

&lt;h3 id=&quot;modelattribute&quot;&gt;ModelAttribute&lt;/h3&gt;

&lt;p&gt;요청된 파라미터를 도메인 모델이나 DTO같은 모델로 매핑을 해준다.&lt;/p&gt;

&lt;p&gt;아래와 같은 User 클래스가 있다고 가정해보자.&lt;/p&gt;

&lt;h4 id=&quot;주의-객체를-만들-때-setter-or-전체-생성자를-선언을-해주어야-한다&quot;&gt;주의!! 객체를 만들 때 Setter or 전체 생성자를 선언을 해주어야 한다.&lt;/h4&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getPassword&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setPassword&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;User{&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&quot;id='&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'\''&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&quot;, password='&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'\''&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
                &lt;span class=&quot;sc&quot;&gt;'}'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그리고 &lt;code class=&quot;highlighter-rouge&quot;&gt;/modelAttribute?id=asdf&amp;amp;password=qer&lt;/code&gt;라는 요청이 있을 시 다음과 같이 작성이 가능하다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/modelAttribute&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;modelAttribute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@ModelAttribute&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;RequestParam과 마찬가지로 ModelAttribute 어노테이션도 생략이 가능하다.&lt;/p&gt;

&lt;h3 id=&quot;requestbody&quot;&gt;RequestBody&lt;/h3&gt;

&lt;p&gt;http body를 객체로 매핑해주는 어노테이션이다.
다음과 같은 테스트 코드가 있다고 가정해 보자.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RequestBodyTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;password&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;webTestClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/requestBody&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;contentType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MediaType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;APPLICATION_JSON_UTF8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MediaType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;APPLICATION_JSON_UTF8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Mono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;just&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exchange&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;expectBody&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;consumeWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getResponseBody&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이때 다음과 같이 Controller를 작성 가능하다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;nd&quot;&gt;@PostMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/requestBody&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;requestBody&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@RequestBody&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Q. RequestBody는 APPLICATION_FORM_URLENCODED타입을 인식하지 못해요
A. Spring에서는 APPLICATION_FORM_URLENCODED를 RequestBody로 인식하지 못한다고 합니다. 그 대신, @ModelAttribute를 사용하거나 어노테이션을 제거하면 정상적으로 매핑이 가능합니다.&lt;/p&gt;

&lt;p&gt;Q. RequestParam과 ModelAttribute 어노테이션 없이 어떻게 매핑을 해주는 건가요?
A. String, int, long 등의 단순한 primitive 타입이라면 RequestParam, 그게 아니라 모델인 경우에는 ModelAttribute로 판단한다고 합니다.&lt;/p&gt;</content><author><name>Shake Van</name><email>vsh931025@gmail.com</email></author><category term="Spring" /><category term="Spring" /><category term="Controller" /><summary type="html">RequestParam vs ModelAttribute vs RequestBody 어노테이션의 차이는 무엇일까?</summary></entry><entry><title type="html">6주 회고</title><link href="http://localhost:4000/%ED%9A%8C%EA%B3%A0/remind-6/" rel="alternate" type="text/html" title="6주 회고" /><published>2019-10-14T00:00:00+09:00</published><updated>2019-10-14T00:00:00+09:00</updated><id>http://localhost:4000/%ED%9A%8C%EA%B3%A0/remind-6</id><content type="html" xml:base="http://localhost:4000/%ED%9A%8C%EA%B3%A0/remind-6/">&lt;blockquote&gt;
  &lt;p&gt;기간 : 2019년 10월 07일(월) ~ 2019년 10월 13일(일)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;이번-주-목표&quot;&gt;이번 주 목표&lt;/h2&gt;
&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;1일 1커밋&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;HeadFirst DesignPattern 한 챕터 정리&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;1일 HIIT 최소 한번이상 실시&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;발표 준비하기(forward proxy, reverse proxy)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;나에게-칭찬해주고-싶은-점&quot;&gt;나에게 칭찬해주고 싶은 점&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;성공적인 발표를 마쳤다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;성장을-위한-조언&quot;&gt;성장을 위한 조언&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;다음 발표부터는 호흡을 조절하는 연습이 필요할 것 같다.&lt;/li&gt;
  &lt;li&gt;Spring의 각 어노테이션의 역할을 명확히 이해할 필요가 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;다음-주-목표&quot;&gt;다음 주 목표&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;1일 1커밋&lt;/li&gt;
  &lt;li&gt;HeadFirst DesignPattern 한 챕터 정리&lt;/li&gt;
  &lt;li&gt;1일 HIIT 최소 한번이상 실시&lt;/li&gt;
  &lt;li&gt;RestController vs Controller 어노테이션 차이&lt;/li&gt;
  &lt;li&gt;ModelAttribute, ReqeustBody, RequestParam, PathVariable 어노테이션 공부&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;총평&quot;&gt;총평&lt;/h2&gt;
&lt;p&gt;이번 mvc 미션을 하면서 Servlet의 역할에 대해서 많은 이해가 되었다. 하지만 Spring mvc 프레임워크를 비슷하게 구현하려다 보니 Spring에 대한 이해가 많이 부족했다는 것을 알 수 있었다.
이번 기회에 해당 내용에 대해서 공부 및 정리가 필요해 보인다.&lt;/p&gt;</content><author><name>Shake Van</name><email>vsh931025@gmail.com</email></author><category term="회고" /><category term="회고" /><summary type="html">기간 : 2019년 10월 07일(월) ~ 2019년 10월 13일(일)</summary></entry><entry><title type="html">프록시 서버</title><link href="http://localhost:4000/etc/proxy/" rel="alternate" type="text/html" title="프록시 서버" /><published>2019-10-10T00:00:00+09:00</published><updated>2019-10-10T00:00:00+09:00</updated><id>http://localhost:4000/etc/proxy</id><content type="html" xml:base="http://localhost:4000/etc/proxy/">&lt;h3 id=&quot;프록시&quot;&gt;프록시&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;프록시 : 서버와 클라이언트 사이에 중계기로서 대리로 통신을 수행하는 것

프록시 서버 : 프록시 기능을 하는 서버
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;프록시 패턴 : 컴퓨터 프로그래밍에서 소프트웨어 디자인 패턴의 하나&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;프록시 서버 : 클라이언트가 자신을 통해서 다른 네트워크 서비스에 간접적으로 접속할 수 있게 해 주는 컴퓨터나 응용 프로그램&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;공개 프록시 : 누구나 자유롭게 접속하여 사용할 수 있는 프록시 서버&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;리버스 프록시 : 컴퓨터 네트워크에서 클라이언트를 대신해서 한 대 이상의 서버로부터 자원을 추출하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;프록시 서버&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;프록시-서버의-특징&quot;&gt;프록시 서버의 특징&lt;/h3&gt;

&lt;h4 id=&quot;보안&quot;&gt;보안&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;외부에서 내부 네트워크에 대한 직접적인 액세스를 차단&lt;/li&gt;
  &lt;li&gt;내부 -&amp;gt; 외부로 나가는 모든 네트워크는 프록시 서버를 거치게 되며 이를 이용해 유해 사이트 등을 차단할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;속도&quot;&gt;속도&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;캐싱을 통한 속도 향상&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;서버-우회&quot;&gt;서버 우회&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;내부 네트워크의 주소가 아닌 프록시 서버의 주소를 타기 때문에 우회가 가능&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;일부-프록시-서버는-캐시를-이용해-요청된-정보들을-저장할-수-있다&quot;&gt;일부 프록시 서버는 캐시를 이용해 요청된 정보들을 저장할 수 있다&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;이렇게 캐시를 해두고 난 후에, 캐시 안에 있는 정보를 요구하는 요청에 대해서는 외부 요청없이 해당 값을 리턴 한다.
    &lt;ul&gt;
      &lt;li&gt;외부와의 연결을 하지 않아도 된다는 장점&lt;/li&gt;
      &lt;li&gt;외부와의 트랙픽을 줄일 수 있다 -&amp;gt; 네트워크 병목 현상을 방지&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;외부-인터넷에서는-client의-정보를-알-수-없다&quot;&gt;외부 인터넷에서는 Client의 정보를 알 수 없다.&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;프록시 서버가 대신해서 요청해주기 때문에 외부에서는 프록시 서버의 정보가 나타나게 된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;foward-proxy-vs-reverse-proxy&quot;&gt;Foward Proxy vs Reverse Proxy&lt;/h3&gt;

&lt;h4 id=&quot;포워드-프록시&quot;&gt;포워드 프록시&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Anonymity&lt;/li&gt;
  &lt;li&gt;Caching&lt;/li&gt;
  &lt;li&gt;Blocking unwanted sites&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;리버스-프록시&quot;&gt;리버스 프록시&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Load Balancing(로드 밸런싱)&lt;/li&gt;
  &lt;li&gt;Caching&lt;/li&gt;
  &lt;li&gt;Isolating internal traffic&lt;/li&gt;
  &lt;li&gt;Logging&lt;/li&gt;
  &lt;li&gt;Canary Deployment&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Q. 프록시 서버와 방화벽의 차이점?&lt;/p&gt;

&lt;p&gt;A. 프록시와 방화벽 모두 특정 사이트의 접근을 막을 수 있지만, 방화벽은 본질적으로 차단 vs 프록시 서버는 웹사이트에 액세스 할 수 없는 경우 리다이렉션을하는 내부 매커니즘을 보유하고 있다. 또한 프록시와 방화벽의 큰 차이점은 외부에서 내부 네트워크 주소를 알 수 없다라는 점이다.&lt;/p&gt;

&lt;p&gt;Q. 프록시 서버와 라우터의 차이&lt;/p&gt;

&lt;p&gt;A. 작동되는 계층의 차이?&lt;/p&gt;

&lt;p&gt;출처 : https://ko.wikipedia.org/wiki/프록시
https://www.quora.com/What-is-the-difference-between-a-forward-proxy-and-a-router
https://yourbusiness.azcentral.com/difference-between-firewall-proxy-server-20024.html&lt;/p&gt;</content><author><name>Shake Van</name><email>vsh931025@gmail.com</email></author><category term="etc" /><category term="프록시 서버" /><category term="프록시" /><category term="proxy" /><category term="proxy server" /><summary type="html">프록시</summary></entry><entry><title type="html">5주 회고</title><link href="http://localhost:4000/%ED%9A%8C%EA%B3%A0/remind-5/" rel="alternate" type="text/html" title="5주 회고" /><published>2019-10-06T00:00:00+09:00</published><updated>2019-10-06T00:00:00+09:00</updated><id>http://localhost:4000/%ED%9A%8C%EA%B3%A0/remind-5</id><content type="html" xml:base="http://localhost:4000/%ED%9A%8C%EA%B3%A0/remind-5/">&lt;blockquote&gt;
  &lt;p&gt;기간 : 2019년 9월 30일(월) ~ 2019년 10월 06일(일)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;이번-주-목표&quot;&gt;이번 주 목표&lt;/h2&gt;
&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;1일 1커밋&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;HeadFirst DesignPattern 한 챕터 정리&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;1일 HIIT 최소 한번이상 실시&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;스프링 부트 스타터 책 읽어보기&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;자바 8 in action 읽어보기&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;여태까지 내가 알고 있었던 내용, 배운 내용 정리하기&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;나에게-칭찬해주고-싶은-점&quot;&gt;나에게 칭찬해주고 싶은 점&lt;/h2&gt;

&lt;h2 id=&quot;성장을-위한-조언&quot;&gt;성장을 위한 조언&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;기능의 구현을 마친 후에 최적의 설계를 고민해보면 좋을 것 같다.&lt;/li&gt;
  &lt;li&gt;페어에게 너무 의지하는 사람이 되지 않도록 하자&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;다음-주-목표&quot;&gt;다음 주 목표&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;1일 1커밋&lt;/li&gt;
  &lt;li&gt;HeadFirst DesignPattern 한 챕터 정리&lt;/li&gt;
  &lt;li&gt;1일 HIIT 최소 한번이상 실시&lt;/li&gt;
  &lt;li&gt;발표 준비하기(forward proxy, reverse proxy)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;총평&quot;&gt;총평&lt;/h2&gt;
&lt;p&gt;최근 들어 의욕이 많이 떨어진 것 같다.&lt;/p&gt;</content><author><name>Shake Van</name><email>vsh931025@gmail.com</email></author><category term="회고" /><category term="회고" /><summary type="html">기간 : 2019년 9월 30일(월) ~ 2019년 10월 06일(일)</summary></entry><entry><title type="html">멀티쓰레드에서 서블릿 인스턴스를 재사용할 때 발생할 수 있는 문제점?</title><link href="http://localhost:4000/java/servlet-in-multi-Thread/" rel="alternate" type="text/html" title="멀티쓰레드에서 서블릿 인스턴스를 재사용할 때 발생할 수 있는 문제점?" /><published>2019-10-05T00:00:00+09:00</published><updated>2019-10-05T00:00:00+09:00</updated><id>http://localhost:4000/java/servlet-in-multi-Thread</id><content type="html" xml:base="http://localhost:4000/java/servlet-in-multi-Thread/">&lt;blockquote&gt;
  &lt;p&gt;JVM 메모리는 어떻게 관리되며, 인스턴스를 재사용할 때 어떤 문제가 발생할 수 있을까?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;자바 프로그래밍에서 클래스의 인스턴스를 생성할 때 비용이 발생한다. 
인스턴스를 생성하고 더 이상 사용하지 않을 경우 가비지 콜렉션 과정을 통해 메모리에서 해제하는 과정 또한 비용이 발생한다. 따라서 인스턴스를 매번 생성할 필요가 없는 경우 매번 인스턴스를 생성하지 않는 것이 성능 측면에서 더 유리하다.&lt;/p&gt;

&lt;p&gt;이 단계에서 개발자가 갖추어야 할 역량 중의 하나가 클라이언트 요청마다 매번 인스턴스를 생성해야 하는지, 생성하지 않고 이미 생성된 인스턴스를 재사용할 것인지를 판단해야 한다. 이에 대한 기준은 &lt;code class=&quot;highlighter-rouge&quot;&gt;인스턴스가 상태 값을 유지해야 하는지&lt;/code&gt;에 따라 구분된다. 매 클라이언트마다 서로 다른 상태 값을 유지할 피요가 있는 경우에는 매 요청마다 인스턴스를 생성해야 한다. 하지만 Controller등은 매 요청마다 서로 다른 상태 값을 가지지 않기 때문에 매번 인스턴스를 생성하지 않고 인스턴스 하나를 생성한 후 재사용할 수 있다.&lt;/p&gt;

&lt;p&gt;서블릿은 서블릿 컨테이너가 시작할 때 인스턴스 하나를 생성한 후 재사용한다. 이 같은 환경에서 소스코드 구현을 잘못하면 심각한 버그를 만들어 낼 수 있다. 이 버그는 매번 발생하는 버그가 아니라 여러명의 클라이언트가 동시에 같은 코드를 실행 하는 경우 발생할 수 있기 때문에 간헐적으로 발생한다. 따라서 버그의 원인을 찾기 힘들다. 하지만 버그에 따른 결과는 치명적일 수 있기 때문에 반드시 주의해야 한다.&lt;/p&gt;

&lt;p&gt;JVM은 코드를 실행하기 위해 메모리를 스택과 힙 영역으로 나눠서 관리한다. &lt;code class=&quot;highlighter-rouge&quot;&gt;스택 영역은 각 메소드가 실행될 때 메소드의 인자. 로컬 변수 등을 관리하는 메모리 영역&lt;/code&gt;으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;각 스레드마다 서로 다른 스택 영역&lt;/code&gt;을 가진다. &lt;code class=&quot;highlighter-rouge&quot;&gt;힙 영역은 클래스의 인스턴스 상태 데이터를 관리하는 영역&lt;/code&gt;이다. &lt;code class=&quot;highlighter-rouge&quot;&gt;힙 영역은 스레드가 서로 공유할 수 있는 영역&lt;/code&gt;이다.
메모리의 구조는 대략 다음과 같다&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/image/2019-10-01-servlet/image-1.png&quot; alt=&quot;connect&quot; /&gt;&lt;/p&gt;

&lt;p&gt;JVM은 각 메소드 별로 스택 프레임을 생성한다. ShowController의 execute() 메소드를 실행하면 execute() 메소드에 대한 스택 프레임의 로컬 변수 영역의 첫 번째 위치에 자기 자신에 대한 메모리 위치를 가리킨다. ShowController에 대한 인스턴스는 힙에 생성되어 있으며, ShowController는 필드에 Question과 List&lt;Answer&gt;를 가지기 때문에 힙에 생성되어 있는 Question과 List&lt;Answer&gt; 인스턴스를 가리키는 구조로 실행된다. 위와같은 구조에서 2개의 스레드가 ShowController의 execute() 메소드를 실행한 결과는 다음과 같다.&lt;/Answer&gt;&lt;/Answer&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/image/2019-10-01-servlet/image-2.png&quot; alt=&quot;connect&quot; /&gt;&lt;/p&gt;

&lt;p&gt;첫 번째 쓰레드가 접근했을 때는 별다른 특이사항이 없다. 하지만 &lt;code class=&quot;highlighter-rouge&quot;&gt;첫번째 스레드가 완료되지 않은 상태에서 두 번째 쓰레드 요청에 의해 execute() 메소드가 실행될 경우&lt;/code&gt; 발생한다. 이 때의 메모리 상태는 아래와 같다.&lt;/p&gt;

&lt;h3 id=&quot;원래-jvm-stack은-각-쓰레드에-맞게-두개를-그려야-하지만-공간-상-하나로-대체-하였습니다&quot;&gt;원래 JVM Stack은 각 쓰레드에 맞게 두개를 그려야 하지만 공간 상 하나로 대체 하였습니다.&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/image/2019-10-01-servlet/image-3.png&quot; alt=&quot;connect&quot; /&gt;&lt;/p&gt;

&lt;p&gt;두 번째 쓰레드가 실행 되면서 ShowController가 가리키는 Question과 List&lt;Answer&gt;가 1번이 아닌 2번으로 바뀌었다. 두 번째 쓰레드는 정상적인 실행이 되겠지만 이 때 `첫번째 쓰레드도 1번이 아닌 2번에 대한 응답을 받게` 된다.&lt;/Answer&gt;&lt;/p&gt;

&lt;p&gt;이를 해결하기 위해서 Question과 List&lt;Answer&gt;를 execute()의 로컬 변수로 구현함으로써 해결할 수 있다. 이 때 메모리 접근은 다음과 같이 변하게 된다.&lt;/Answer&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/image/2019-10-01-servlet/image-4.png&quot; alt=&quot;connect&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위와 같이 구현하면 ShowController가 Question과 List&lt;Answer&gt; 인스턴스에 대한 참조를 가지지 않고 메소드의 스택프레임의 로컬 변수 영역에서 해당 인스턴스에 대한 참조를 가진다.&lt;/Answer&gt;&lt;/p&gt;

&lt;p&gt;참고 : 포비의 자바 웹 프로그래밍 Next Step&lt;/p&gt;</content><author><name>Shake Van</name><email>vsh931025@gmail.com</email></author><category term="JAVA" /><category term="자바" /><category term="java" /><summary type="html">JVM 메모리는 어떻게 관리되며, 인스턴스를 재사용할 때 어떤 문제가 발생할 수 있을까?</summary></entry><entry><title type="html">서블릿 필터(Servlet Filter)</title><link href="http://localhost:4000/java/lecture/" rel="alternate" type="text/html" title="서블릿 필터(Servlet Filter)" /><published>2019-10-04T00:00:00+09:00</published><updated>2019-10-04T00:00:00+09:00</updated><id>http://localhost:4000/java/lecture</id><content type="html" xml:base="http://localhost:4000/java/lecture/">&lt;p&gt;mvc framework에서 servlet과 같은 역할을 하는 것은 controller&lt;/p&gt;

&lt;p&gt;controller에서 반복적으로 발생하는 일이 있을 수 있다 -&amp;gt; 서블릿 내의 중복이 발생한다&lt;/p&gt;

&lt;p&gt;인프라 성격의 로직(인프라 로직) : 권한 관리, 성능 측정, 해당 메서드에 대해서 로깅을 처리&lt;/p&gt;

&lt;p&gt;컨트롤러 메서드의 성능 측정 방법 : (메서드의 끝나는 시간 - 시작 시간) - 이 기능을 모든 메서드에 적용하면 반복적인 코드들이 중복된다.&lt;/p&gt;

&lt;p&gt;서블릿에서는 인프라 로직을 처리하는 servlet filter가 존재함&lt;/p&gt;

&lt;p&gt;spring mvc에서는 interceptor가 servlet filter역할을 함&lt;/p&gt;

&lt;p&gt;controller에 대한 반복적인 로직 처리는 interceptor(dispatch servlet &amp;lt;-&amp;gt; controller 사이)&lt;/p&gt;

&lt;p&gt;servlet filter는 chain방식으로 작동된다&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;들어올 때 : A -&amp;gt; B -&amp;gt; C의 필터가 적용되었다면&lt;/li&gt;
  &lt;li&gt;나갈 때 : C -&amp;gt; B -&amp;gt; A의 순서로 필터가 적용 된다&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;chain.doFilter(request, response);&lt;/code&gt;을 구현하지 않으면 Servlet이 호출되지 않는다.&lt;/p&gt;

&lt;p&gt;기존 로직에서 어떠한 기능 추가 없이 반복되는 기능을 구현한 것을 AOP라 한다 -&amp;gt; @Transactional이 일종의 AOP이다.&lt;/p&gt;

&lt;p&gt;web.xml에서 annotation기반으로 바뀌면서 서블릿 필터에 대한 순서 보장이 어렵다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;이를 해결하기 위해 서블릿 필터들을 묶은 서블릿 필터를 구현해 해결해야 한다.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Shake Van</name><email>vsh931025@gmail.com</email></author><category term="JAVA" /><category term="자바" /><category term="java" /><summary type="html">mvc framework에서 servlet과 같은 역할을 하는 것은 controller</summary></entry></feed>